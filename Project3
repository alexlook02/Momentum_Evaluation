#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 10 11:50:21 2021
@author: alexlook
"""
import csv
import matplotlib.pyplot as plt
def file_processing(filename):
    infile = open(filename, "r")
    csv_reader = csv.reader(infile, delimiter = ",")
    lst = []
    for line in csv_reader:
        lst.append(line)
        
    return lst

def storing_closing(filename):
    file = file_processing(filename)
    file.pop(0)
    adj_list = []
    for i in file:
        adj_closing = i.pop(5)
        adj_list.append(adj_closing)
        
    return adj_list
        
def lst_momentum_year(filename):
    lst = storing_closing(filename)
    momentum_lst = []
    i = 0
    for item in lst:
        # if i >= len(lst)/2:
        #     break
        if i > 0:
            momentum = (float(lst[i]) - float(lst[i-1])) / float(lst[i-1]) 
            momentum_lst.append(momentum)
            i += 1
        else:
            i += 1
    return momentum_lst
        
def average_pct_change(filename):
    lst = lst_momentum_year(filename)
    total = 0
    i = 0
    for pct in lst:
        total += pct
        i +=1
    
    return total

def moving_average_5_days(filename):
    lst = storing_closing(filename)
    moving_avg = []
    i = 0
    total = 0
    while True:
        if i == len(lst):
                break
        if i < 4:
            total += float(lst[i])
        if i == 5:
            total += float(lst[i])
            avg = total/5
            moving_avg.append(avg)
        if i > 5:
            total -= float(lst[i-5])
            total += float(lst[i])
            avg = total/5
            moving_avg.append(avg)
            
        i += 1
        
    return moving_avg
    
def moving_average_20_days(filename):
    lst = storing_closing(filename)
    moving_avg = []
    i = 0
    total = 0
    while True:
        if i == len(lst):
                break
        if i < 19:
            total += float(lst[i])
        if i == 19:
            total += float(lst[i])
            avg = total/20
            moving_avg.append(avg)
        if i > 19:
            total -= float(lst[i-20])
            total += float(lst[i])
            avg = total/20
            moving_avg.append(avg)
            
        i += 1
        
    return moving_avg

def moving_average_100_days(filename):
    lst = storing_closing(filename)
    moving_avg = []
    i = 0
    total = 0
    while True:
        if i == len(lst):
                break
        if i < 98:
            total += float(lst[i])
        if i == 99:
            total += float(lst[i])
            avg = total/100
            moving_avg.append(avg)
        if i > 99:
            total -= float(lst[i-100])
            total += float(lst[i])
            avg = total/100
            moving_avg.append(avg)
            
        i += 1
        
    return moving_avg

def momentum_line(filename):
    lst = storing_closing(filename)
    momentum_lst = []
    i = 0
    
    while True:
        if i >= 20:
            if i == len(lst):
                break
            momentum = float(lst[i]) - float(lst[i - 20])
            momentum_lst.append(momentum)
        i += 1
    return momentum_lst

# def momentum_evaluation_simple(filename):
#     lst = moving_average_20_days(filename)
#     momentum_change = []
#     start_2y = float(lst[0])
#     start_1y = float(lst[int(len(lst)-127-(len(lst)-127)/2)])
#     start_6m = float(lst[int(len(lst)-127-(len(lst)-127)/4)])
#     start_3m = float(lst[int(len(lst)-127-(len(lst)-127)/8)])
#     start_1m = float(lst[int(len(lst)-127-(len(lst)-127)/24)])
#     start_2w = float(lst[int(len(lst)-127-(len(lst)-127)/48)])
#     start_1w = float(lst[int(len(lst)-127-(len(lst)-127)/96)])
#     end = float(lst[len(lst)-127])
#     momentum_2y = (end - start_2y) / 504
#     momentum_1y = (end - start_1y) / 252
#     momentum_6m = (end - start_6m) / 126
#     momentum_3m = (end - start_3m) / 63
#     momentum_1m = (end - start_1m) / 21
#     momentum_2w = (end - start_2w) / 10.2
#     momentum_1w = (end - start_1w) / 5.1
#     momentum_change.append(momentum_2y)
#     momentum_change.append(momentum_1y)
#     momentum_change.append(momentum_6m)
#     momentum_change.append(momentum_3m)
#     momentum_change.append(momentum_1m)
#     momentum_change.append(momentum_2w)
#     momentum_change.append(momentum_1w)
#     return momentum_change

def sma_pct_changes_20_day(filename):
    lst = moving_average_20_days(filename)
    final_lst = []
    lst_2_year = lst[:(len(lst)-126)]
    lst_1_year = lst[int(round((len(lst)-126)/2,0)):(len(lst)-126)]
    lst_6_months = lst[int(round((len(lst)-126)/4*3,0)):(len(lst)-126)]
    lst_3_months = lst[int(round((len(lst)-126)*7/8,0)):(len(lst)-126)]
    lst_1_months = lst[int(round((len(lst)-126)*23/24,0)):(len(lst)-126)]
    lst_2_week = lst[int(round((len(lst)-126)*47/48,0)):(len(lst)-126)]
    lst_1_week = lst[int(round((len(lst)-126)*95/96,0)):(len(lst)-126)]
    
    total = 0
    i = 0
    while True:
        if i > 0:
            total += (lst_2_year[i]-lst_2_year[i-1])/lst_2_year[i-1]
            i += 1
        else:
            i += 1
        if i == len(lst_2_year):
            break
    final_lst.append(total/(len(lst_2_year)-1))

    total = 0
    i = 0
    while True:
        if i > 0:
            total += (lst_1_year[i]-lst_1_year[i-1])/lst_1_year[i-1]
            i += 1
        else:
            i += 1
        if i == len(lst_1_year):
            break
    final_lst.append(total/(len(lst_1_year)-1))
    
    total = 0
    i = 0
    while True:
        if i > 0:
            total += (lst_6_months[i]-lst_6_months[i-1])/lst_6_months[i-1]
            i += 1
        else:
            i += 1
        if i == len(lst_6_months):
            break
    final_lst.append(total/(len(lst_6_months)-1))
    
    total = 0
    i = 0
    while True:
        if i > 0:
            total += (lst_3_months[i]-lst_3_months[i-1])/lst_3_months[i-1]
            i += 1
        else:
            i += 1
        if i == len(lst_3_months):
            break
    final_lst.append(total/(len(lst_3_months)-1))
    
    total = 0
    i = 0
    while True:
        if i > 0:
            total += (lst_1_months[i]-lst_1_months[i-1])/lst_1_months[i-1]
            i += 1
        else:
            i += 1
        if i == len(lst_1_months):
            break
    final_lst.append(total/(len(lst_1_months)-1))
    
    total = 0
    i = 0
    while True:
        if i > 0:
            total += (lst_2_week[i]-lst_2_week[i-1])/lst_2_week[i-1]
            i += 1
        else:
            i += 1
        if i == len(lst_2_week):
            break
    final_lst.append(total/(len(lst_2_week)-1))
    
    total = 0
    i = 0
    while True:
        if i > 0:
            total += (lst_1_week[i]-lst_1_week[i-1])/lst_1_week[i-1]
            i += 1
        else:
            i += 1
        if i == len(lst_1_week):
            break
    final_lst.append(total/(len(lst_1_week)-1))
    
    return final_lst

def momentum_graph(filename):
    
    plt.figure()
    plt.xlabel("Trading Days")
    plt.ylabel("20 Day Momentum")
    plt.title("20 Day Momentum Graph")
    lst = momentum_line(filename)
    i = 0
    y = 10
    while True:
        if i == len(lst):
            break
        plt.plot(y, lst[i], ".", markersize = 3, color = "red")
        y += 1
        i += 1
    y = 0
    while True:
        plt.plot(y , 0, ".", markersize = 1, color = "black")
        y += 1
        if y == len(lst):
            break
    return plt.figure()

def moving_averages_graph(filename):
    lst = moving_average_5_days(filename)
    plt.figure()
    
    y = 0
    for item in lst:
        plt.plot(y, item, ".", markersize = 1, color = "blue")
        y += 1
    plt.plot(y, lst[0], ".", markersize = 1, color = "blue", label = "5 Day Moving Average")
        
    lst = moving_average_20_days(filename)
    y = 20
    for item in lst:
        plt.plot(y, item, ".", markersize = 1, color = "green")
        y += 1
    plt.plot(20, lst[0], ".", markersize = 1, color = "green", label = "20 Day Moving Average")

    lst = moving_average_100_days(filename)
    plt.ylabel("Price")
    plt.xlabel("Trading Days")
    plt.title("Different Moving Averages Measurements")
    y = 100
    for item in lst:
        plt.plot(y, item, ".", markersize = 1, color = "red")
        y += 1
        
    plt.plot(100, lst[0], ".", markersize = 1, color = "red", label = "100 Day Moving Average")
    plt.legend()
    
    return plt.figure()

def stock_price_graph(filename):
    lst = storing_closing(filename)
    plt.figure()
    plt.xlabel("Trading Days")
    plt.ylabel("Percent Change (%)")
    plt.title("% Price Change for Apple Stock by Day")
    y = 0
    i = 0

    while True:

        if i == len(lst):
            break
        pct = 0
        pct += (float(lst[i]) - float(lst[0])) / float(lst[0]) * 100
        if float(lst[i]) > float(lst[i-1]):
            
            plt.plot(y, pct, ".", markersize = 1, color = "green")
        if float(lst[i]) < float(lst[i-1]):

             plt.plot(y, pct, ".", markersize = 1, color = "red")

        i += 1
        y += 1
    
    return plt.figure()

def moving_average_comparison(filename):
    lst = moving_average_20_days(filename)
    i = len(lst)-126
    y = 0
    plt.figure()
    plt.xlabel("Trading Days")
    plt.ylabel("Simple Moving Average (20 Days)")
    plt.title("Projected vs Actual Returns")
    while True:
        if i == len(lst):
            break
        plt.plot(y, lst[i], "o", markersize = 2, color = "black")
        i += 1
        y += 1
    plt.plot(y, lst[i - 1], "*", markersize = 5, color = "black", label = "Actual Returns")
    lst1 = sma_pct_changes_20_day(filename)
    i = 0
    y = 0
    while True:
        if i == 126:
            break
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[0])**i, ".", markersize = 1, color = "blue")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[1]) ** i, ".", markersize = 1, color = "red")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[2]) ** i, ".", markersize = 1, color = "green")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[3]) ** i, ".", markersize = 1, color = "orange")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[4]) ** i, ".", markersize = 1, color = "pink")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[5]) ** i, ".", markersize = 1, color = "purple")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[6]) ** i, ".", markersize = 1, color = "yellow")
        i += 1
        y += 1
        
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[0]) ** i, "*", markersize = 5, color = "blue", label = "2 years")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[1]) ** i, "*", markersize = 5, color = "red", label = "1 year")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[2]) ** i, "*", markersize = 5, color = "green", label = "6 months")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[3]) ** i, "*", markersize = 5, color = "orange", label = "3 months")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[4]) ** i, "*", markersize = 5, color = "pink", label = "1 month")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[5]) ** i, "*", markersize = 5, color = "purple", label = "2 weeks")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[6]) ** i, "*", markersize = 5, color = "yellow", label = "1 week")
    plt.legend()
    return plt.figure()

def moving_average_comparison_zoomed(filename):
    lst = moving_average_20_days(filename)
    i = len(lst)-126
    y = 0
    plt.figure()
    plt.xlabel("Trading Days")
    plt.ylabel("Simple Moving Average (20 Days)")
    plt.title("Projected vs Actual Returns Zoomed")
    while True:
        if i == len(lst):
            break
        plt.plot(y, lst[i], "o", markersize = 2, color = "black")
        i += 1
        y += 1
    plt.plot(y, lst[i - 1], "*", markersize = 5, color = "black", label = "Actual Returns")
    lst1 = sma_pct_changes_20_day(filename)
    i = 0
    y = 0
    while True:
        if i == 126:
            break
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[0])**i, ".", markersize = 1, color = "blue")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[1]) ** i, ".", markersize = 1, color = "red")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[2]) ** i, ".", markersize = 1, color = "green")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[3]) ** i, ".", markersize = 1, color = "orange")
        plt.plot(y, lst[len(lst)-126] * (1 + lst1[4]) ** i, ".", markersize = 1, color = "pink")
        # plt.plot(y, lst[len(lst)-126] * (1 + lst1[5]) ** i, ".", markersize = 1, color = "purple")
        # plt.plot(y, lst[len(lst)-126] * (1 + lst1[6]) ** i, ".", markersize = 1, color = "yellow")
        i += 1
        y += 1
        
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[0]) ** i, "*", markersize = 5, color = "blue", label = "2 years")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[1]) ** i, "*", markersize = 5, color = "red", label = "1 year")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[2]) ** i, "*", markersize = 5, color = "green", label = "6 months")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[3]) ** i, "*", markersize = 5, color = "orange", label = "3 months")
    plt.plot(y, lst[len(lst)-126] * (1 + lst1[4]) ** i, "*", markersize = 5, color = "pink", label = "1 month")
    # plt.plot(y, lst[len(lst)-126] * (1 + lst1[5]) ** i, "*", markersize = 5, color = "purple", label = "2 weeks")
    # plt.plot(y, lst[len(lst)-126] * (1 + lst1[6]) ** i, "*", markersize = 5, color = "yellow", label = "1 week")
    plt.legend()
    return plt.figure()

def apple_showcase(filename):
    stock_price_graph(filename)
    moving_averages_graph(filename)
    momentum_graph(filename)
    moving_average_comparison(filename)
    moving_average_comparison_zoomed(filename)
    
    return plt.figure

# This calculates the variance of our actual returns which will later be used 
# to find the correlation between our expected and actual data
def stddev_benchmark(filename):
    lst = moving_average_20_days(filename)
    lst = lst[(len(lst)-126):]
    total = 0
    stddev = []
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    return stddev
    
def stddev_stock(filename):
    start = moving_average_20_days(filename)
    lst_change = sma_pct_changes_20_day(filename)
    lst = []
    i = 0
    while True:
        if i == 126:
            break
        lst.append(start[len(start)-126] * (1 + lst_change[0]) ** i)
        i += 1
    
    total = 0
    stddev = []
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    
    lst = []
    i = 0
    while True:
        if i == 126:
            break
        lst.append(start[len(start)-126] * (1 + lst_change[1]) ** i)
        i += 1
    
    total = 0
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    
    lst = []
    i = 0
    while True:
        if i == 126:
            break
        lst.append(start[len(start)-126] * (1 + lst_change[2]) ** i)
        i += 1
    
    total = 0
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    
    lst = []
    i = 0
    while True:
        if i == 126:
            break
        lst.append(start[len(start)-126] * (1 + lst_change[3]) ** i)
        i += 1
    
    total = 0
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    
    lst = []
    i = 0
    while True:
        if i == 126:
            break
        lst.append(start[len(start)-126] * (1 + lst_change[4]) ** i)
        i += 1
    
    total = 0
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    
    lst = []
    i = 0
    while True:
        if i == 126:
            break
        lst.append(start[len(start)-126] * (1 + lst_change[5]) ** i)
        i += 1
    
    total = 0
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    
    lst = []
    i = 0
    while True:
        if i == 126:
            break
        lst.append(start[len(start)-126] * (1 + lst_change[6]) ** i)
        i += 1
    
    total = 0
    for item in lst:
        total += item
    mean = total / len(lst)
    total_for_var = 0
    for item in lst:
        total_for_var += (mean - item)**2
    stddev.append((total_for_var/len(lst))**(1/2))
    
    return stddev

def correlation(filename):
    lst = moving_average_20_days(filename)
    actual = lst[len(lst)-126:]
    lst_change = sma_pct_changes_20_day(filename)
    stddev_actual = stddev_benchmark(filename)
    stddev_expected = stddev_stock(filename)
    correlation = []
    
    w = 0
    while True:
        if w == 7:
            break
        expected = []
        i = 0
        while True:
            if i == 126:
                break
            expected.append(lst[len(lst)-126] * (1 + lst_change[w]) ** i)
            i += 1
            
        total = 0
        for item in actual:
            total += item
        mean1 = total / len(actual)
        
        total = 0
        for item in expected:
            total += item
        mean2 = total / len(actual)
        
        i = 0
        total = 0
        while True:
            if i == 126:
                break
            total += ((actual[i]-mean1) * (expected[i]-mean2))
            i += 1
        correlation.append((total / len(actual)) / (stddev_actual[0] * stddev_expected[w]))
        w += 1
    
    return correlation

def average_error(filename):
    lst = moving_average_20_days(filename)
    actual = lst[len(lst)-126:]
    lst_change = sma_pct_changes_20_day(filename)
    error = []
    
    w = 0
    while True:
        if w == 7:
            break
        expected = []
        i = 0
        while True:
            if i == 126:
                break
            expected.append(lst[len(lst)-126] * (1 + lst_change[w]) ** i)
            i += 1
        
        i = 0
        total = 0
        while True:
            if i == 126:
                break
            total += abs(1-(expected[i]/actual[i]))
            i += 1
        error.append((total / len(actual)))
        w += 1
    
    return error

def main():
    # apple_showcase("/Users/alexlook/Downloads/CRM.csv")
    # apple_showcase("/Users/alexlook/Downloads/AAPL (5).csv")
    # apple_showcase("/Users/alexlook/Downloads/AMZN.csv")
    # print(variance_benchmark("/Users/alexlook/Downloads/AAPL (5).csv"))
    # print(correlation("/Users/alexlook/Downloads/CRM.csv"))
    # print(average_error("/Users/alexlook/Downloads/CRM.csv"))
    # print(sma_pct_changes_20_day("/Users/alexlook/Downloads/AAPL (5).csv"))
    
    stocks = [average_error("/Users/alexlook/Downloads/AAPL (5).csv"),
    average_error("/Users/alexlook/Downloads/AMGN.csv"),
    average_error("/Users/alexlook/Downloads/AXP.csv"),
    average_error("/Users/alexlook/Downloads/BA.csv"),
    average_error("/Users/alexlook/Downloads/CAT.csv"),
    average_error("/Users/alexlook/Downloads/CSCO.csv"),
    average_error("/Users/alexlook/Downloads/CVX.csv"),
    average_error("/Users/alexlook/Downloads/GS.csv"),
    average_error("/Users/alexlook/Downloads/HD.csv"),
    average_error("/Users/alexlook/Downloads/HON.csv"),
    average_error("/Users/alexlook/Downloads/IBM.csv"),
    average_error("/Users/alexlook/Downloads/INTC.csv"),
    average_error("/Users/alexlook/Downloads/JNJ.csv"),
    average_error("/Users/alexlook/Downloads/DIS.csv"),
    average_error("/Users/alexlook/Downloads/JPM.csv"),
    average_error("/Users/alexlook/Downloads/MCD.csv"),
    average_error("/Users/alexlook/Downloads/MMM.csv"),
    average_error("/Users/alexlook/Downloads/MRK.csv"),
    average_error("/Users/alexlook/Downloads/MSFT.csv"),
    average_error("/Users/alexlook/Downloads/NKE.csv"),
    average_error("/Users/alexlook/Downloads/PG.csv"),
    average_error("/Users/alexlook/Downloads/TRV.csv"),
    average_error("/Users/alexlook/Downloads/PG.csv"),
    average_error("/Users/alexlook/Downloads/UNH.csv"),
    average_error("/Users/alexlook/Downloads/CRM.csv"),
    average_error("/Users/alexlook/Downloads/VZ.csv"),
    average_error("/Users/alexlook/Downloads/V.csv"),
    average_error("/Users/alexlook/Downloads/WMT.csv")]
    
    overall_pct = []
    t_2_year = 0
    t_1_year = 0
    t_6_months = 0
    t_3_months = 0
    t_1_months = 0
    t_2_weeks = 0
    t_1_weeks = 0
    
    for item in stocks:
        t_2_year += item[0]
        t_1_year += item[1]
        t_6_months += item[2]
        t_3_months += item[3]
        t_1_months += item[4]
        t_2_weeks += item[5]
        t_1_weeks += item[6]
        
    overall_pct.append(t_2_year/28)
    overall_pct.append(t_1_year/28)
    overall_pct.append(t_6_months/28)
    overall_pct.append(t_3_months/28)
    overall_pct.append(t_1_months/28)
    overall_pct.append(t_2_weeks/28)
    overall_pct.append(t_1_weeks/28)
    
    print("Average percent error for 2 years is: ", round(overall_pct[0]*100,2), "%")
    print("Average percent error for 1 year is: ", round(overall_pct[1]*100,2), "%")
    print("Average percent error for 6 months is: ", round(overall_pct[2]*100,2), "%")
    print("Average percent error for 3 months is: ", round(overall_pct[3]*100,2), "%")
    print("Average percent error for 1 month is: ", round(overall_pct[4]*100,2), "%")
    print("Average percent error for 2 weeks is: ", round(overall_pct[5]*100,2), "%")
    print("Average percent error for 1 week is: ", round(overall_pct[6]*100,2), "%\n")
    
    print("Therefore, we deem the most accurate range of data is 1 year!")
main()
    
